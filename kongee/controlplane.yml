# https://github.com/kubernetes-sigs/aws-load-balancer-controller/blob/main/docs/guide/service/annotations.md
# https://gist.github.com/mgoodness/1a2926f3b02d8e8149c224d25cc57dc1
namespace: kong
replicaCount: 1
image:
  repository: docker.io/kong/kong-gateway
  tag: "2.5"
deployment:
  kong:
    enabled: true
    daemonset: false
env:
  role: control_plane
  plugins: "bundled,openid-connect"
  log_level: debug
  nginx_worker_processes: "2"
  status_listen:  0.0.0.0:8100
  cluster_listen: 0.0.0.0:8005
  cluster_telemetry_listen: 0.0.0.0:8006
  cluster_data_plane_purge_delay: 60
  lua_package_path: /opt/?.lua;;
  prefix: /kong_prefix/
  password:
    valueFrom:
      secretKeyRef:
        name: kong-enterprise-superuser-password
        key: password

  proxy_stream_error_log: /dev/stdout
  proxy_stream_access_log: /dev/stdout
  status_error_log: /dev/stdout
  proxy_access_log: /dev/stdout
  proxy_error_log: /dev/stdout

  database: "postgres"
  pg_user:
    valueFrom:
      secretKeyRef:
         name: kong-postgres-credentials
         key: pg_user
  pg_database:
    valueFrom:
      secretKeyRef:
         name: kong-postgres-credentials
         key: pg_database
  pg_password:
    valueFrom:
      secretKeyRef:
         name: kong-postgres-credentials
         key: pg_password
  pg_host:
    valueFrom:
      secretKeyRef:
         name: kong-postgres-credentials
         key: pg_host
  pg_ro_user:
    valueFrom:
      secretKeyRef:
         name: kong-postgres-credentials
         key: pg_ro_user
  pg_ro_database:
    valueFrom:
      secretKeyRef:
         name: kong-postgres-credentials
         key: pg_ro_database
  pg_ro_password:
    valueFrom:
      secretKeyRef:
         name: kong-postgres-credentials
         key: pg_ro_password
  pg_ro_host:
    valueFrom:
      secretKeyRef:
         name: kong-postgres-credentials
         key: pg_ro_host
  pg_ssl_version: tlsv1_2
  pg_ssl_verify: off
  pg_ssl: off

  cluster_cert: /etc/secrets/kong-cluster-cert/tls.crt
  cluster_cert_key: /etc/secrets/kong-cluster-cert/tls.key
  lua_ssl_trusted_certificate: /etc/ssl/certs/ca-certificates.crt 

  vitals: on
  admin_gui_protocol: http
  admin_gui_host: "a174254b8e5d24f96885d4ab2be3f1bf-ec1b763ed592998c.elb.us-east-1.amazonaws.com"
  admin_gui_url: "http://a174254b8e5d24f96885d4ab2be3f1bf-ec1b763ed592998c.elb.us-east-1.amazonaws.com:8002"
  admin_api_uri: "http://a01a07367b87d43dbb34759a35e47884-0c3e5cc22f034f71.elb.us-east-1.amazonaws.com:8001"
  admin_ssl_cert: /etc/secrets/kong-tls/tls.crt
  admin_ssl_cert_key: /etc/secrets/kong-tls/tls.key
  admin_gui_ssl_cert: /etc/secrets/kong-tls/tls.crt
  admin_gui_ssl_cert_key: /etc/secrets/kong-tls/tls.key
  admin_gui_access_log: /dev/stdout
  admin_gui_error_log: /dev/stdout
  admin_access_log: /dev/stdout
  admin_error_log: /dev/stdout

  portal: on
  portal_cors_origins: "*"
  portal_gui_protocol: https
  portal_gui_url: "https://portal.kong.hbfs.io/"
  portal_api_uri: "https://portal.kong.hbfs.io/api"
  portal_gui_host: "portal.kong.hbfs.io"
  portal_gui_access_log: /dev/stdout
  portal_api_access_log: /dev/stdout
  portal_gui_error_log: /dev/stdout
  portal_api_error_log: /dev/stdout
  portal_auth: basic-auth
  portal_session_conf:
    valueFrom:
      secretKeyRef:
        name: kong-session-config
        key: portal_session_conf

secretVolumes: 
  - kong-cluster-cert
  - kong-tls

proxy:
  enabled: false

cluster:
  enabled: true
  tls:
    enabled: true
    servicePort: 8005
    containerPort: 8005

clustertelemetry:
  enabled: true
  type: ClusterIP
  tls:
    enabled: true
    servicePort: 8006
    containerPort: 8006

enterprise:
  enabled: true
  license_secret: kong-enterprise-license
  vitals:
    enabled: true
  portal:
    enabled: true
  rbac:
    enabled: true
    admin_gui_auth: basic-auth
    session_conf_secret: kong-session-config
    admin_gui_auth_conf_secret: kong-session-config
  smtp:
    enabled: false

status:
  enabled: true
  http:
    enabled: true
    containerPort: 8100
  tls:
    enabled: false
    containerPort: 8543

ingressController:
  enabled: true
  installCRDs: false
  args: ["--v=5"]
  env:
    publish_service: kong/dataplane-kong-proxy
    kong_admin_tls_skip_verify: true
    kong_admin_token:
      valueFrom:
        secretKeyRef:
          name: kong-enterprise-superuser-password
          key: password

podAnnotations:
  kuma.io/gateway: enabled

migrations:
  preUpgrade: true
  postUpgrade: true
  annotations:
    sidecar.istio.io/inject: false
    kuma.io/sidecar-injection: "disabled"

admin:
  enabled: true
  type: LoadBalancer
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-name: "kong-controlplane-admin-api"
    service.beta.kubernetes.io/aws-load-balancer-subnets: "subnet-0a4c44c677c2ea74c,subnet-07579767f7d37f425"
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: tcp
    service.beta.kubernetes.io/aws-load-balancer-proxy-protocol: "*"
    service.beta.kubernetes.io/aws-load-balancer-internal: "true"
    service.beta.kubernetes.io/aws-load-balancer-type: nlb
  tls:
    enabled: true
    parameters:
    - http2
  http:
    enabled: true
  ingress:
    enabled: false
    path: /api
    hostname: a01a07367b87d43dbb34759a35e47884-0c3e5cc22f034f71.elb.us-east-1.amazonaws.com
    tls: kong-tls
    annotations: {}

manager:
  enabled: true
  type: LoadBalancer
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-name: "kong-controlplane-manager-gui"
    service.beta.kubernetes.io/aws-load-balancer-subnets: "subnet-0a4c44c677c2ea74c,subnet-07579767f7d37f425"
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: tcp
    service.beta.kubernetes.io/aws-load-balancer-proxy-protocol: "*"
    service.beta.kubernetes.io/aws-load-balancer-internal: "true"
    service.beta.kubernetes.io/aws-load-balancer-type: nlb
  http:
    enabled: true
  tls:
    enabled: true
    parameters:
    - http2
  ingress:
    enabled: false
    hostname:  174254b8e5d24f96885d4ab2be3f1bf-ec1b763ed592998c.elb.us-east-1.amazonaws.com
    annotations: {}
    tls: kong-tls
    path: /

portalapi:
  enabled: true
  type: ClusterIP
  annotations:
    konghq.com/protocol: "https"
  ingress:
    enabled: true
    path: /api
    hostname: portal.kong.hbfs.io
    tls: kong-tls
    annotations:
      konghq.com/protocols: "https"
      konghq.com/strip-path: "true"
      kubernetes.io/ingress.class: "kong"
      konghq.com/https-redirect-status-code: "301"
  http:
    enabled: false
  tls:
    enabled: true
    servicePort: 8447
    containerPort: 8447
    parameters:
    - http2

portal:
  enabled: true
  type: ClusterIP
  annotations:
    konghq.com/protocol: "https"
  ingress:
    enabled: true
    path: /
    hostname: portal.kong.hbfs.io
    tls: kong-tls
    annotations:
      konghq.com/protocols: "https"
      kubernetes.io/ingress.class: "kong"
      konghq.com/https-redirect-status-code: "301"
      konghq.com/strip-path: "false"
  http:
    enabled: false
    servicePort: 8003
    containerPort: 8003
  tls:
    enabled: true
    servicePort: 8446
    containerPort: 8446
    parameters:
    - http2
